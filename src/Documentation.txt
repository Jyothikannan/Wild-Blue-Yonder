Documentation:
 Documentation for Shooting Game implemented in Java : ----------------------------------------------------

Pass 1 (Archana):

 1. Added a Main.java file (used to render simple game window)
 a. Size and Width set to that of a square (800 x 800)
 b. Called an instance of GamePanel class (created next)
 2. Created a class called GamePanel.java
 a. Imported event & action Listeners 
b. Overrode methods of JPanel class to create a custom player and a timer (stopWatch)

 Pass 2 (Jyothi):

 1. Added a Player.java file(which manages player position,movement)
 Attributes:
 a. x and y stores the player's current position.
 b. The width and Height defines the player'size,which is 40*40 sq.
 c. speed is the rate at which player moves(5 pixels).
 d. The booleans (movingLeft, movingRight, movingUp, movingDown) track if the player is 
moving in a particular direction.
 Constructor:
 a. Player(int x, int y) sets the initial position of the player on the screen.
 Methods:
 a. draw(Graphics g) draw's a player square at the player's current position.
 b. update() adjusts the position based on the direction flags.
 c. keyPressed(KeyEvent e) changes the direction when the arrow key are pressed.
 d. keyReleased(KeyEvent e)stops the movement when the arrow key are released.

 Pass 3(Hashida)

 1. Added a Bullet.java file (used to create bullets.)
 a. Represents a bullet object in a game.
 2. Attributes:
 a. private int x, y: Position coordinates of the bullet.
 b. private final int speed: Movement speed of the bullet (constant at 10).
 3. Constructor:
 a. Bullet(int x, int y): Initializes the bullet's position.
 4. Methods:
 a. public void update(): Updates the bullet's position by moving it upward based on its 
speed.
 b. public void draw(Graphics g): Draws the bullet as a red oval on the provided graphics 
context.
 c. public boolean isO Screen(): Returns `true` if the bullet has moved o the screen (above 
the top of the window).
 Updated Player.java file:
 1. New Attributes:
 a. private ArrayList<Bullet> bullets: List to store the bullets fired by the player
 2. Constructor Updates:
 a. bullets = new ArrayList<>(): Initializes the bullets list.
 3. Method Updates:
 a. public void draw(Graphics g): Draws the player and iterates through the bullets list to 
draw each bullet.
 4. Update Method Updates:
 a. Inside update(): Iterates through the bullets list, updating each bullet's position and 
removing any that are o-screen.
5. Key Pressed Updates:
 a. if (e.getKeyCode() == KeyEvent.VK_SPACE): Adds a new Bullet to the list when the space 
 bar is pressed, positioning it above the player.
 1. Added a Enemy.java file (used to create enemies)
 a. Represents an enemy object in a game.
 2. Attributes:
 a. private int x, y: Position coordinates of the enemy.
 b. private int speed: Movement speed of the enemy (default is 2).
 c. private int width: Width of the enemy (default is 40).
 d. private int height: Height of the enemy (default is 40).
 3. Constructor:
 a. Enemy(int x, int y): Initializes the enemy's position.
 4. Methods:
 a. public void update(): Updates the enemy's position by moving it down based on its 
speed.
 b. public void draw(Graphics g): Draws the enemy as a green rectangle on the provided 
graphics context.
 c. public boolean isO Screen(): Returns `true` if the enemy has moved o the screen (below 
the height of the main game window).
 Updated GamePanel.java file:
 1. New Attributes:
 a. private Timer enemySpawner: Timer to control the spawning of enemies.
 2. Constructor Updates:
 a. enemySpawner = new Timer(2500, new ActionListener() { ... }): Initializes the enemy 
spawner to trigger every 2.5 seconds, calling the `spawnEnemies` method.
 3. Method Updates:
 a. public void startGame(): Starts both the game timer and the enemy spawner.
4. New Method:
 a. private void spawnEnemies(): Generates a new `Enemy` at a random horizontal position 
and adds it to the `enemies` list.
 5. Action Performed Updates:
 a. Inside actionPerformed(ActionEvent e): Updates each enemy's position, checks if it's o
screen, and removes it from the list if necessary.
 6. Paint Component Updates:
 a. In paintComponent(Graphics g): Draws each enemy on the panel in addition to the player.

 Pass 4(Archana) :

 1. Created a collision detection check under GamePanel class to check for collisions between 
the bullet and the enemy.
 2. Added getter functions under Enemy.java class to access the private elements inside 
enemy class, similarly added getters to Bullet
 class as well.
 3. Incorporated a copy of the Bullet arraylist under GamePanel class to safely access the 
bullets during iteration.
 4. Added a getBullets() method under Player class to safely access a copy of bullets, since 
accessing the original bullet list led to 
a lag/crash on the output screen.
 5. Similarly added a removeBullet(Bullet b) method under Player class to safely  remove
 bullets from the copy of the bullets ArrayList.

 Pass 5(Jyothi):
  Implemented a Start Game and Game Over display in the GamePanel class. These features
  provide a more user-friendly interface by showing appropriate messages to the player 
  at different stages of the game.

  Implementation:

  Start Game Display:
-A start screen is shown when the game begins.
-This feature ensures that the game does not start abruptly and gives the user time
 to get ready.
1. Added a startScreen boolean variable to manage whether the game is in the start
 screen mode.
2. Created the showStartScreen(Graphics g) method to render the start screen message.
3. Integrated this method in the paintComponent(Graphics g) method, displaying the start 
 screen based on the startScreen flag.

 Game Over Display:
- A game-over screen is displayed when the player loses.
-This feature provides feedback to the user, indicating the end of the game.
1.  Created the showGameOver(Graphics g) method to render the game-over message.
2. Integrated this method in the paintComponent(Graphics g) method, displaying the
 game-over message when the gameOver flag is true.

 Keyboard Interaction:
-During the start screen, pressing any key transitions the game into active gameplay.
1.Modified the keyPressed(KeyEvent e) method to check the startScreen flag and start 
the game if it is true.

